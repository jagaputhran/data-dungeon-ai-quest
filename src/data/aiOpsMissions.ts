
export interface AiOpsMission {
  id: number;
  name: string;
  description: string;
  icon: string;
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced' | 'Expert';
  baseScore: number;
  aiFeatures: string[];
  skills: string[];
  codeTemplates: {
    [key: string]: string;
  };
}

export const aiOpsMissions: AiOpsMission[] = [
  {
    id: 1,
    name: "üê≥ Dockerizer Lab",
    description: "Generate multi-stage Dockerfiles for optimal container builds. Learn to containerize applications with AI assistance.",
    icon: "üê≥",
    difficulty: "Beginner",
    baseScore: 100,
    aiFeatures: [
      "Generate multi-stage Dockerfiles",
      "Optimize image size automatically",
      "Security best practices integration",
      "Dependency caching strategies"
    ],
    skills: ["Docker", "Containerization", "Multi-stage builds", "Image optimization"],
    codeTemplates: {
      dockerfile: `# Multi-stage Dockerfile generated by AI
FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

FROM node:18-alpine AS runtime
WORKDIR /app
COPY --from=builder /app/node_modules ./node_modules
COPY . .
EXPOSE 3000
CMD ["npm", "start"]`
    }
  },
  {
    id: 2,
    name: "üîß CI/CD Arena",
    description: "Build GitHub Actions and GitLab CI workflows with AI-powered pipeline generation.",
    icon: "üîß",
    difficulty: "Intermediate",
    baseScore: 150,
    aiFeatures: [
      "Generate GitHub Actions workflows",
      "Create GitLab CI pipelines",
      "Automated testing integration",
      "Security scanning inclusion"
    ],
    skills: ["CI/CD", "GitHub Actions", "GitLab CI", "Pipeline automation", "Testing"],
    codeTemplates: {
      githubActions: `name: AI-Generated CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '18'
    - run: npm ci
    - run: npm test
    
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: docker build -t myapp .`
    }
  },
  {
    id: 3,
    name: "‚òÅÔ∏è Infra-as-Code Forge",
    description: "Use AI to generate Terraform configurations for AWS, GCP, and Azure infrastructure.",
    icon: "‚òÅÔ∏è",
    difficulty: "Advanced",
    baseScore: 200,
    aiFeatures: [
      "Generate Terraform modules",
      "Multi-cloud compatibility",
      "Security groups optimization",
      "Resource dependency mapping"
    ],
    skills: ["Terraform", "Infrastructure as Code", "AWS", "GCP", "Azure", "Resource management"],
    codeTemplates: {
      terraform: `# AI-Generated Terraform Configuration
provider "aws" {
  region = var.aws_region
}

resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "AI-Generated VPC"
  }
}

resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = data.aws_availability_zones.available.names[0]
  map_public_ip_on_launch = true

  tags = {
    Name = "Public Subnet"
  }
}`
    }
  },
  {
    id: 4,
    name: "‚ò∏Ô∏è Kubernetes Commander",
    description: "AI builds Kubernetes YAMLs and Helm charts for scalable deployments.",
    icon: "‚ò∏Ô∏è",
    difficulty: "Advanced",
    baseScore: 250,
    aiFeatures: [
      "Generate Kubernetes manifests",
      "Create Helm charts automatically",
      "Auto-scaling configuration",
      "Ingress and service mesh setup"
    ],
    skills: ["Kubernetes", "Helm", "Microservices", "Container orchestration", "Service mesh"],
    codeTemplates: {
      kubernetes: `# AI-Generated Kubernetes Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-app
  labels:
    app: ai-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ai-app
  template:
    metadata:
      labels:
        app: ai-app
    spec:
      containers:
      - name: ai-app
        image: myapp:latest
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: ai-app-service
spec:
  selector:
    app: ai-app
  ports:
  - port: 80
    targetPort: 3000
  type: LoadBalancer`
    }
  },
  {
    id: 5,
    name: "üîÑ Canary Chaos",
    description: "Create canary and blue-green deployment strategies with automated rollback logic.",
    icon: "üîÑ",
    difficulty: "Expert",
    baseScore: 300,
    aiFeatures: [
      "Generate canary deployment configs",
      "Blue-green strategy automation",
      "Automated rollback triggers",
      "Traffic splitting logic"
    ],
    skills: ["Canary deployments", "Blue-green deployments", "Traffic management", "Rollback strategies"],
    codeTemplates: {
      canary: `# AI-Generated Canary Deployment
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: canary-rollout
spec:
  replicas: 5
  strategy:
    canary:
      steps:
      - setWeight: 20
      - pause: {duration: 10}
      - setWeight: 40
      - pause: {duration: 10}
      - setWeight: 60
      - pause: {duration: 10}
      - setWeight: 80
      - pause: {duration: 10}
  selector:
    matchLabels:
      app: canary-app
  template:
    metadata:
      labels:
        app: canary-app
    spec:
      containers:
      - name: canary-app
        image: myapp:v2
        ports:
        - containerPort: 8080`
    }
  },
  {
    id: 6,
    name: "üõ°Ô∏è SecureOps Simulation",
    description: "Inject AI-based security scans using Snyk, Trivy, and other security tools.",
    icon: "üõ°Ô∏è",
    difficulty: "Advanced",
    baseScore: 200,
    aiFeatures: [
      "Automated security scanning",
      "Vulnerability assessment",
      "Compliance checking",
      "Security policy generation"
    ],
    skills: ["Security scanning", "Vulnerability management", "Compliance", "DevSecOps"],
    codeTemplates: {
      security: `# AI-Generated Security Pipeline
name: Security Scan
on: [push, pull_request]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: \${{ secrets.SNYK_TOKEN }}
        
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AI-Generated Security Scan'
        path: '.'`
    }
  },
  {
    id: 7,
    name: "üìà Observability Overlord",
    description: "AI sets up Prometheus, Grafana, and AlertManager for comprehensive monitoring.",
    icon: "üìà",
    difficulty: "Expert",
    baseScore: 350,
    aiFeatures: [
      "Generate Prometheus configs",
      "Create Grafana dashboards",
      "Set up alert rules",
      "Custom metrics integration"
    ],
    skills: ["Prometheus", "Grafana", "Monitoring", "Alerting", "Observability"],
    codeTemplates: {
      prometheus: `# AI-Generated Prometheus Configuration
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "alert_rules.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
      
  - job_name: 'ai-app'
    static_configs:
      - targets: ['ai-app:3000']
    metrics_path: '/metrics'
    scrape_interval: 5s`,
      grafana: `{
  "dashboard": {
    "title": "AI-Generated App Monitoring",
    "panels": [
      {
        "title": "Request Rate",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(http_requests_total[5m])",
            "legendFormat": "{{method}} {{status_code}}"
          }
        ]
      }
    ]
  }
}`
    }
  },
  {
    id: 8,
    name: "üß¨ Rollback & Recovery Ops",
    description: "AI generates rollback and auto-heal logic with GitOps integration.",
    icon: "üß¨",
    difficulty: "Expert",
    baseScore: 400,
    aiFeatures: [
      "Automated rollback strategies",
      "GitOps workflow integration",
      "Self-healing mechanisms",
      "Disaster recovery planning"
    ],
    skills: ["GitOps", "Disaster recovery", "Auto-healing", "Rollback automation", "ArgoCD"],
    codeTemplates: {
      gitops: `# AI-Generated ArgoCD Application
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ai-gitops-app
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/user/ai-app-config
    targetRevision: HEAD
    path: k8s
  destination:
    server: https://kubernetes.default.svc
    namespace: production
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m`
    }
  }
];
